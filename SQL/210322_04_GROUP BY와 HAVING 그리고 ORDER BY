-- GROUP BY와 HAVING 그리고 ORDER BY
-- ORDER BY절 : SELECT한 컬럼을 가지고 정렬 할 때 사용
-- ORDER BY 컬럼명 | 컬럼별칭 | 컬럼나열 순번 [ASC] | DESC
-- ORDER BY 컴럼명 정렬방식, 컬럼명 정렬방식, 컬럼명 정렬방식..... (여러 개 정렬 순차적 진행 가능)
-- 첫 번째를 기준으로 하는 컬럼에 대해 정렬하고
-- 같은 값들에 대해 두 번째 기준으로 하는 컬럼에 대해 다시 정렬
-- SELECT 구문 맨 마지막에 위치
-- 실행순서도 맨 마지막에 실행됨

/*
순서 잘 기억하고 있어야!
별칭 사용할 때 그걸 가져다 쓸 수 있으므로 생성 안 됐을 때 쓰는 불상사 없어야

5: SELECT 컬럼명 AS 별칭, 계산식, 함수식
1: FROM 참조할 테이블명
2: WHERE 컬럼명 | 함수식 비교연산자 비교값
3: GROUP BY 그룹을 묶을 컬럼명 | 함수식
4: HAVING 그룹함수식 비교연산자 비교값 (group by 다음에 having절이 올 수도 안 올 수도)
6: ORDER BY 컬럼명 | 별칭 | 컬럼순번 정렬방식
*/

SELECT
      DEPT_CODE
    , COUNT(*) 사원수
       -- 그룹함수라 결과값이 하나만 나오므로 전체에 대한 내용을 뽑아낼 수 없어서 에러
  FROM EMPLOYEE
 GROUP BY DEPT_CODE;

SELECT
       DEPT_CODE
     , JOB_CODE
     , SUM(SALARY)
     , COUNT(*)
  FROM EMPLOYEE
 GROUP BY DEPT_CODE
        , JOB_CODE
 ORDER BY 1;
 -- 부서코드로 묶고 잡 코드로도 묶어줘야! 두 컬럼을 *모두* 기준점으로 해줘야!
 -- 각각의 행들이 여러 개 있으므로...
 -- GROUP BY에서 헷갈리는 부분임
 
 -- 직원 테이블에서 부서 코드별 그룹을 지정하여
 -- 부서코드, 그룹별 급여의 합계, 그룹별 급여의 평균(정수처리), 인원수 조회하고
 -- 부서코드순으로 오름차순 정렬하세요.
 SELECT
        DEPT_CODE
      , SUM(SALARY) 합계
      , FLOOR(AVG(SALARY)) 평균
      , COUNT(*)
  FROM EMPLOYEE
 GROUP BY DEPT_CODE
 ORDER BY DEPT_CODE ASC;
 
-- 직원 테이블에서 직급코드, *보너스를 받는* <- 조건이므로 WHERE 사용 사원 수를 조회하여
-- 직급 코드 순으로 오름차순 정렬하세요.
SELECT
       JOB_CODE
     , COUNT(*)
  FROM EMPLOYEE
 WHERE BONUS IS NOT NULL
 GROUP BY JOB_CODE
 ORDER BY JOB_CODE;

-- 직원 테이블에서 주민번호의 8번째 자리를 조회하여
-- 1이면 남, 2이면 여로 결과를 조회하고
-- 성별별 급여 평균(정수 처리), 급여 합계, 인원수를 조회한 뒤
-- 인원수로 내림차순 정렬하세요.

-- 새로 분류를 해서 컬럼명으로 그룹을 못 지어냄 -> 함수식 필요 -> DECODE 필요
SELECT
       DECODE(SUBSTR(EMP_NO,8,1),1,'남',2,'여') 성별
     , FLOOR(AVG(SALARY)) 평균
     , SUM(SALARY) 합계
     , COUNT(*) 인원수
  FROM EMPLOYEE
 -- GROUP BY 성별
 -- EMPLOYEE에 성별이란 컬럼은 없음 -> 이후에 SELECT절에서 만들어짐 -> 오류
 GROUP BY DECODE(SUBSTR(EMP_NO,8,1),1,'남',2,'여')
 ORDER BY 인원수 DESC;

-- GROUP BY 절 : 같은 값들이 여러 개 기록된 컬럼을 가지고
--               같은 값들을 하나의 그룹으로 묶는다.
-- GROUP BY 컬럼명 | 함수식
-- 여러 개의 값을 묶어서 하나의 그룹으로 처리할 목적으로 사용한다.
-- 그룹으로 묶은 값에 대해서 SELECT절에서 그룹함수를 사용함

-- HAVING절 : 그룹함수로 구해올 그룹에 대해 조건을 설정할 때 사용
-- HAVING 컬럼명 | 함수식 비교연산자 비교값
SELECT
       DEPT_CODE
     , FLOOR(AVG(SALARY)) 평균
  FROM EMPLOYEE
 WHERE SALARY > 3000000
 GROUP BY DEPT_CODE
 ORDER BY 1;
 -- 급여가 300만 이상인 사람들 부서별로 평균
 -- 얘를 기준으로 오름차순으로 조회하겠다 (ORDER BY DEPT_CODE;)
 -- 그룹을 짓고 그 안에서 평균을 구하려면 HAVING

SELECT
       DEPT_CODE
     , FLOOR(AVG(SALARY)) 평균
  FROM EMPLOYEE
 GROUP BY DEPT_CODE
HAVING FLOOR(AVG(SALARY)) > 3000000
 ORDER BY 1;
  -- 각 부서의 월급의 평균이 300만 이상인 부서를 뽑아냄
  -- 모든 사원 뽑아옴 부서별로 묶음 그 부서별로 급여 평균이 300만 이상인 부서를 뽑아냄
  -- 직원 기준(전체 테이블) vs. 부서 기준(모든 직원을 부서로 나눔)
  -- 기준이 개인이냐 부서이냐에 따라 다른 것

-- 부서별 그룹의 급여 합계 중 9백만원을 초과하는 부서코드와 급여 합계 조회
SELECT
       DEPT_CODE
     , SUM(SALARY)
  FROM EMPLOYEE
 GROUP BY DEPT_CODE
HAVING SUM(SALARY) > 9000000;
 
-- 급여 합계가 가장 많은 부서의 부서코드와 급여 합계를 구하시오
SELECT
       DEPT_CODE
     , SUM(SALARY)
  FROM EMPLOYEE
 GROUP BY DEPT_CODE
ORDER BY SUM(SALARY) DESC;
 
SELECT
      DEPT_CODE
    , SUM(SALARY)
  FROM EMPLOYEE
 WHERE DEPT_CODE = 'D9'
 GROUP BY DEPT_CODE;
 
-- 1. 급여 합계가 가장 많은 부서의 합계 금액
SELECT
       MAX(SUM(SALARY))
  FROM EMPLOYEE
 GROUP BY DEPT_CODE;

-- 2. 급여 합계가 가장 많은 부서를 조회
SELECT
       DEPT_CODE
     , SUM(SALARY)
  FROM EMPLOYEE
 GROUP BY DEPT_CODE
HAVING SUM(SALARY) = 17700000;

SELECT
       DEPT_CODE
     , SUM(SALARY)
  FROM EMPLOYEE
 GROUP BY DEPT_CODE
HAVING SUM(SALARY) = (SELECT MAX(SUM(SALARY))
                        FROM EMPLOYEE
                       GROUP BY DEPT_CODE
                      );
-- 조회된 값을 하나를 가지고 와서 SUM이랑 매핑 시키는 것
-- 하나의 값을 명확하게 넣어주는 것
-- 쿼리문 대신 MAX(SUM(SALARY))를 넣으면 그룹 기준인지 개인 기준인지 명확하지 않음 -> 튕겨나감
-- 그룹에 대한 내용을 명확하게 넣어줘야 함
-- 비교를 하려면 한쪽은 값이 되어야만 함
-- 오른쪽엔 명확한 값을 넣어줘야


-- 집계함수
-- ROLLUP 함수 : 그룹별로 중간 집계 처리를 하는 함수
-- GROUP BY 절에서만 사용하는 함수
-- 그룹별로 묶여진 값에 대한 중간 집계와 총 집계를 구할 때 사용함
-- 그룹별로 계산된 결과값들에 대한 총 집계가 자동으로 추가됨
SELECT
       JOB_CODE
     , SUM(SALARY)
  FROM EMPLOYEE
 GROUP BY ROLLUP(JOB_CODE)
 ORDER BY 1;
 -- ROLLUP을 통해 총 집계에 대한 총 합을 구할 수 있음
 
-- CUBE 함수 : 그룹별 산출한 결과를 집계하는 함수
SELECT
       JOB_CODE
     , SUM(SALARY)
  FROM EMPLOYEE
 GROUP BY CUBE(JOB_CODE)
 ORDER BY 1;
 
-- 인자로 전달한 그룹 중 가장 먼저 지정한 그룹별 합계와 총 합계(중간집계의 총합)를 구하는 함수 = ROLLUP 함수
SELECT
       DEPT_CODE
     , JOB_CODE
     , SUM(SALARY)
  FROM EMPLOYEE
 GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
 ORDER BY 1;
 
-- 그룹으로 지정된 모든 그룹에 대한 집계와 총 합계를 구하는 함수 = CUBE 함수
-- JOB_CODE별 총 합계도 구해줌
SELECT
       DEPT_CODE
     , JOB_CODE
     , SUM(SALARY)
  FROM EMPLOYEE
 GROUP BY CUBE(DEPT_CODE, JOB_CODE)
 ORDER BY 1;

-- GROUPING 함수 : ROLLUP이나 CUBE에 의한 산출문이
-- 인자로 전달받은 컬럼 집합의 산출물이면 0을 반환,
-- 아니면 1을 반환하는 함수
-- 어떤 것 기준으로 묶어놓아서 합계를 계산했는지 확인 가능
SELECT
       DEPT_CODE
     , JOB_CODE
     , SUM(SALARY)
     , GROUP
     ING(DEPT_CODE) "부서별그룹 묶인 상태"
     , GROUPING(JOB_CODE)"직급별그룹 묶인 상태"
  FROM EMPLOYEE
 GROUP BY CUBE(DEPT_CODE, JOB_CODE)
 ORDER BY DEPT_CODE;

SELECT
       DEPT_CODE
     , JOB_CODE
     , SUM(SALARY)
     , CASE
         WHEN GROUPING(DEPT_CODE) = 0 AND GROUPING(JOB_CODE) = 1 THEN '부서별합계'
         -- DEPT_CODE 기준으로 롤업이나 큐브를 적용해서 묶어놓은 것이므로 부서별합계임
         WHEN GROUPING(DEPT_CODE) = 1 AND GROUPING(JOB_CODE) = 0 THEN '직급별합계'
         WHEN GROUPING(DEPT_CODE) = 0 AND GROUPING(JOB_CODE) = 0 THEN '그룹별합계'
         ELSE '총합계'
       END AS 구분
  FROM EMPLOYEE
 GROUP BY CUBE(DEPT_CODE, JOB_CODE)
 ORDER BY 1;
 
 
 
 
-- SET OPERATION(집합연산)
-- UNION : 여러 개의 쿼리 결과를 하나로 합치는 연산자
--         중복된 영역을 제외하여 하나로 합침
SELECT
       EMP_ID
     , EMP_NAME
     , DEPT_CODE
     , SALARY
  FROM EMPLOYEE
 WHERE DEPT_CODE = 'D5'
 UNION
SELECT
       EMP_ID
     , EMP_NAME
     , DEPT_CODE
     , SALARY
  FROM EMPLOYEE
WHERE SALARY > 3000000;
-- 열의 개수(결과값의 개수)는 맞춰줘야!
-- 다른 테이블이라도 괜찮음 (다른 테이블이랑 합칠 때 많이 사용)

-- UNION ALL : 여러 개의 쿼리 결과를 하나로 합치는 연산자
--            UNION과 달리 중복 영역 두 번 포함
SELECT
       EMP_ID
     , EMP_NAME
     , DEPT_CODE
     , SALARY
  FROM EMPLOYEE
 WHERE DEPT_CODE = 'D5'
 UNION ALL
SELECT
       EMP_ID
     , EMP_NAME
     , DEPT_CODE
     , SALARY
  FROM EMPLOYEE
WHERE SALARY > 3000000;

SELECT
       DEPT_CODE
     , JOB_CODE
     , SUM(SALARY)
  FROM EMPLOYEE
 GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
 UNION
SELECT
       ''
     , JOB_CODE
     , SUM(SALARY)
  FROM EMPLOYEE
 GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
 ORDER BY 1;
 -- 갯수만 맞춰주면 컬럼 값 다 합쳐줌
 -- 위의 컬럼 갯수를 맞춰줘야 하므로 ''이라도 해 놓음
 -- 다른 테이블에서 컬럼을 가져와서 UNION으로 처리하더라도 ''으로라도 써놔서 갯수를 맞춰줘야
 
 
 -- INTERSECT : 여러 개의 SELECT한 결과에서 공통부분만 결과로 추출
 --             수학에서의 교집합과 비슷
SELECT
       EMP_ID
     , EMP_NAME
     , DEPT_CODE
     , SALARY
  FROM EMPLOYEE
 WHERE DEPT_CODE = 'D5'
 INTERSECT
SELECT
       EMP_ID
     , EMP_NAME
     , DEPT_CODE
     , SALARY
  FROM EMPLOYEE
WHERE SALARY > 3000000;
 
 
-- MINUS : 선행 SELECT 결과에서 다음 SELECT 결과와 *겹치는 부분을 제외*한 나머지 부분만 추출
--         수학에서 차집합과 비슷 (앞에 있는 것이 기준 -> 여기서 제외)
SELECT
       EMP_ID
     , EMP_NAME
     , DEPT_CODE
     , SALARY
  FROM EMPLOYEE
 WHERE DEPT_CODE = 'D5'
 MINUS
SELECT
       EMP_ID
     , EMP_NAME
     , DEPT_CODE
     , SALARY
  FROM EMPLOYEE
WHERE SALARY > 3000000;


-- GROUPING SETS : 그룹별로 처리된 여러 개의 SELECT문을 하나로 합칠 때 사용한다.
--                 SET OPERATION과 결과가 동일
SELECT
       DEPT_CODE
     , JOB_CODE
     , MANAGER_ID
     , FLOOR(AVG(SALARY))
  FROM EMPLOYEE
 GROUP BY GROUPING SETS((DEPT_CODE, JOB_CODE, MANAGER_ID)
                      , (DEPT_CODE, MANAGER_ID)
                      , (JOB_CODE, MANAGER_ID)
                        );
