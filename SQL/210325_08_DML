-- DML(Data Manipulation Language)
-- INSERT, UPDATE, DELETE, SELECT
-- 데이터 조작언어 - 테이블에 값을 삽입하거나, 수정하거나, 삭제, 조회하는 언어

-- INSERT : 새로운 행 추가 구문
--           테이블의 행 갯수가 증가

-- [표현식]
-- 테이블의 일부 컬럼에 INSERT할 때
-- INSERT INTO 테이블명(컬럼명,컬럼명,... ) VALUES(데이터,테이터,...);
-- 컬럼명의 순서대로 특정한 값 INSERT 가능 (위치 중요)

-- 테이블의 모든 컬럼에 INSERT할 때
-- INSERT INTO 테이블명 VALUES(데이터,테이터,...);

INSERT
  INTO EMPLOYEE E
(
  E.EMP_ID, E.EMP_NAME, E.EMP_NO, E.EMAIL, E.PHONE
, E.DEPT_CODE, E.JOB_CODE, E.SAL_LEVEL, E.SALARY, E.BONUS
, E.MANAGER_ID, E.HIRE_DATE, E.ENT_DATE, E.ENT_YN
)
VALUES 
(
   '900','장채헌','901123-1080503','jang123@gmail.com','01045682547','D1','J7','S3',4300000,0.2
 , '200', SYSDATE,NULL,DEFAULT
);

COMMIT;
-- 내가 지금 한 게 정상적이다라고 확인 -> 공유 가능

SELECT
       E.*
  FROM EMPLOYEE E
 WHERE EMP_NAME = '장채헌';

-- INSERT를 할 때 VALUES 대신 서브쿼리를 이용할 수 있다.
CREATE TABLE EMP_01(
  EMP_ID NUMBER,
  EMP_NAME VARCHAR2(30),
  DEPT_TITLE VARCHAR2(20)
);

SELECT 
       E.*
  FROM EMP_01 E;

INSERT
  INTO EMP_01 A
(
  A.EMP_ID
, A.EMP_NAME
, A.DEPT_TITLE
)
(
  SELECT E.EMP_ID
       , E.EMP_NAME
       , D.DEPT_TITLE
    FROM EMPLOYEE E
    LEFT JOIN DEPARTMENT D ON(E.DEPT_CODE = D.DEPT_ID)
);

-- INSERT ALL : INSERT 시에 사용하는 서브쿼리가 같은 경우 두 개 이상의 테이블에 INSERT ALL을 이용하여
--              한 번에 데이터 삽입 가능
--              단, 각 서브쿼리의 조건절이 같아야 함

CREATE TABLE EMP_DEPT_D1
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , E.DEPT_CODE
     , E.HIRE_DATE
  FROM EMPLOYEE E
 WHERE 1 = 0;

SELECT
       ED.*
  FROM EMP_DEPT_D1 ED;

CREATE TABLE EMP_MANAGER
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , E.MANAGER_ID
  FROM EMPLOYEE E
 WHERE 1 = 0;

SELECT
       EM.*
  FROM EMP_MANAGER EM;

-- EMP_DEPT_D1 테이블에 EMPLOYEE 테이블에 있는 부서코드가 D1인
-- 직원을 조회해서 사번, 이름, 소속부서, 입사일을 삽입하고
-- EMP_MANAGER 테이블에 EMPLOYEE 테이블에 있는 부서코드가 D1인
-- 직원을 조회해서 사번, 이름, 관리자 사번을 조회해서 삽입하세요


INSERT
  INTO EMP_DEPT_D1 A
(
  A.EMP_ID
, A.EMP_NAME
, A.DEPT_CODE
, A.HIRE_DATE
)
(
  SELECT 
         E.EMP_ID
       , E.EMP_NAME
       , E.DEPT_CODE
       , E.HIRE_DATE
    FROM EMPLOYEE E
   WHERE E.DEPT_CODE = 'D1'
);


SELECT
       ED.*
  FROM EMP_DEPT_D1 ED;


INSERT
  INTO EMP_MANAGER A
(
  A.EMP_ID
, A.EMP_NAME
, A.MANAGER_ID
)
(
  SELECT 
         E.EMP_ID
       , E.EMP_NAME
       , E.MANAGER_ID
    FROM EMPLOYEE E
   WHERE E.DEPT_CODE = 'D1'
);

SELECT
       EM.*
  FROM EMP_MANAGER EM;

DELETE
  FROM EMP_DEPT_D1;

DELETE
  FROM EMP_MANAGER;


-- INSERT ALL을 적용
INSERT ALL
  INTO EMP_DEPT_D1
VALUES
(
  EMP_ID
, EMP_NAME
, DEPT_CODE
, HIRE_DATE
)
  INTO EMP_MANAGER
VALUES
(
  EMP_ID
, EMP_NAME
, MANAGER_ID
)
SELECT E.EMP_ID
     , E.EMP_NAME
     , E.DEPT_CODE
     , E.HIRE_DATE
     , E.MANAGER_ID  
  FROM EMPLOYEE E
 WHERE E.DEPT_CODE = 'D1';
 
 -- 서브 쿼리의 조건절(WHERE)이 같을 때 많은 테이블에 데이터를 동시에 넣어줄 수 있음
 -- 조건절이 같으면 뽑아져 나오는 내용이 같으므로 각 열에 알아서 매핑해서 INSERT됨

SELECT
       ED.*
  FROM EMP_DEPT_D1 ED;

SELECT
       EM.*
  FROM EMP_MANAGER EM;


-- EMPLOYEE 테이블에서 입사일 기준으로 2000년 1월 1일 이전에 입사한
-- 사원의 사번, 이름, 입사일, 급여를 조회하여
-- EMP_OLD 테이블에 삽입하고
-- 그 이후에 입사한 사원은 EMP_NEW 테이블에 삽입하세요
CREATE TABLE EMP_OLD
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , E.HIRE_DATE
     , E.SALARY
  FROM EMPLOYEE E
 WHERE 1 = 0;

CREATE TABLE EMP_NEW
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , E.HIRE_DATE
     , E.SALARY
  FROM EMPLOYEE E
 WHERE 1 = 0;

INSERT ALL
  WHEN HIRE_DATE < '2000/01/01'
  THEN
  INTO EMP_OLD
VALUES
(
  EMP_ID
, EMP_NAME
, HIRE_DATE
, SALARY
)
  WHEN HIRE_DATE >= '2000/01/01'
  THEN
  INTO EMP_NEW
VALUES
(
  EMP_ID
, EMP_NAME
, HIRE_DATE
, SALARY
)
SELECT E.EMP_ID
     , E.EMP_NAME
     , E.HIRE_DATE
     , E.SALARY
  FROM EMPLOYEE E;
  
-- 실행순서가 SELECT에서 INSERT로 올라감 

SELECT
       EO.*
  FROM EMP_OLD EO;

SELECT
       EN.*
  FROM EMP_NEW EN;

-- cf. F10 누르면 어떤 객체가 들어가 있는지 '계획설명'에서 볼 수 있음


-- INSERT 정리
INSERT
  INTO 테이블명
(
  컬럼명
, 컬럼명
)
  VALUES
(
  값
, 값
);


-- UPDATE : 데이터에 기록된 컬럼의 값을 수정하는 구문
--          테이블의 전체 행 갯수는 변화가 없다.
-- [표현식]
-- UPDATE 테이블명 SET 컬럼명 = 바꿀값, 컬럼명 = 바꿀값 ....
-- [WHERE 컬럼명 비교연산자 비교값];
-- WHERE 조건절이 없으면 해당 컬럼명이 다 바꿀값으로 통일됨
CREATE TABLE DEPT_COPY
AS
SELECT D.*
  FROM DEPARTMENT D;

UPDATE
       DEPT_COPY DC
   SET DC.DEPT_TITLE = '전략기획팀'
 WHERE DC.DEPT_ID = 'D9';  -- 총무부 -> 전략기획팀
 
SELECT
       DC.*
  FROM DEPT_COPY DC;

-- UPDATE 시에도 서브쿼리를 이용할 수 있다.
-- UPDATE 테이블명
--    SET 수정하려고 하는 컬럼명 = (서브쿼리)

CREATE TABLE EMP_SALARY
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , E.DEPT_CODE
     , E.SALARY
     , E.BONUS
  FROM EMPLOYEE E;

SELECT
       ES.*
  FROM EMP_SALARY ES
 WHERE ES.EMP_NAME IN('유재식','방명수');

-- 방명수 사원의 급여와 보너스율을 유재식 사원과 동일하게 변경
-- 이를 반영하는 UPDATE 문을 작성해보세요.
UPDATE
       EMP_SALARY ES
   SET ES.SALARY = (SELECT E1.SALARY
                      FROM EMPLOYEE E1
                     WHERE E1.EMP_NAME = '유재식'
                    )
     , ES.BONUS = (SELECT E2.BONUS
                     FROM EMPLOYEE E2
                    WHERE E2.EMP_NAME = '유재식'
                    )
     WHERE ES.EMP_NAME = '방명수';


-- SELECT는 결과값이 "RESULT SET" (객체)타입, 한 행 한 행이 커서로 넘어감
-- INSERT, UPDATE, DELETE 의 결과값, 출력값은 "1" 행이 추가되었습니다. -> 결과값이 "정수" 타입


-- 다중열 서브쿼리를 이용한 UPDATE문
-- 조건절이 같을 때 열들을 하나로 묶어서 처리 가능
-- 노옹철, 전형돈, 정중하, 하동운 사원의 급여와 보너스를
-- 유재식 사원의 급여와 보너스와 같게 변경하는 UPDATE문 작성
UPDATE
       EMP_SALARY ES
    SET (ES.SALARY, ES.BONUS) = (SELECT  E1.SALARY
                                       , E1.BONUS
                                  FROM EMPLOYEE E1
                                 WHERE E1.EMP_NAME = '유재식'
                                )
WHERE EMP_NAME IN ('노옹철','전형돈','정중하','하동운');
                
                                 
-- 다중행 서브쿼리를 이용한 UPDATE문
-- EMP_SALARY 테이블에서 아시아 근무지역에 근무하는 직원의 보너스를 0.5로 변경
UPDATE
       EMP_SALARY ES
   SET ES.BONUS = 0.5
 WHERE ES.EMP_ID IN (SELECT 
                            E1.EMP_ID
                       FROM EMPLOYEE E1
                       JOIN DEPARTMENT D1 
                         ON (D1.DEPT_ID = E1.DEPT_CODE)
                       JOIN LOCATION L1
                         ON (L1.LOCAL_CODE = D1.LOCATION_ID)
                      WHERE L1.LOCAL_NAME LIKE 'ASIA%'
                     );

SELECT * FROM EMP_SALARY;

COMMIT;

-- UPDATE 시 변경할 값은 해당 칼럼에 대한 제약조건에 위배되지 않아야 한다.
UPDATE
       EMPLOYEE E
   SET E.DEPT_CODE = '65'
 WHERE E.DEPT_CODE = 'D6'; -- FOREIGN KEY 제약조건에 위배된다. (D6인 코드가 없음)

UPDATE
       EMPLOYEE E
  SET E.EMP_NAME = NULL
 WHERE E.EMP_ID = '200';  -- NOT NULL 제약조건 위배된다.


SELECT
       UC.CONSTRAINT_NAME
     , UCC.COLUMN_NAME
     , UC.CONSTRAINT_TYPE
  FROM USER_CONSTRAINTS UC
  JOIN USER_CONS_COLUMNS UCC ON(UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME)
 WHERE UC.TABLE_NAME = 'EMP_NAME';

UPDATE
       EMPLOYEE E
   SET E.EMP_NO = '621235-1985634' -- UNIQUE 제약조건 위배된다.
 WHERE E.EMP_ID = '201';
   
SELECT * FROM EMPLOYEE;

ROLLBACK;
-- 최신의 COMMIT 찍기 전까지로 돌아감

-- DELETE : 테이블의 행을 삭제하는 구문이다.
--          테이블의 행의 갯수가 줄어든다.
-- DELETE FROM 테이블명 [WHERE 조건설정]
-- 만약 WHERE 조건을 설정하지 않으면 모든 행이 다 삭제된다.
COMMIT;

DELETE 
  FROM EMPLOYEE E1;

SELECT 
       E.*
  FROM EMPLOYEE E;

ROLLBACK;
-- 최근 커밋 전까지로 돌아감

DELETE
  FROM EMPLOYEE E
 WHERE E.EMP_NAME = '장채헌';
-- 여러 개가 지워지면 지워진 행의 수만큼 정수값을 반환해줌

-- FOREIGN KEY 제약조건이 설정되어 있는 경우
-- 참조되고 있는 값에 대해서는 삭제할 수 없다.
-- child record found : 자식테이블에서 현재 사용하고 있다 (따라서 삭제X)
DELETE
  FROM DEPARTMENT D
 WHERE D.DEPT_ID = 'D1';
 
-- FOREIGN KEY 제약조건이 설정되어 있어도
-- 해당 컬럼에서 참조되고 있지 않은 값에 대해서는 삭제 가능
DELETE
  FROM DEPARTMENT D
 WHERE D.DEPT_ID = 'D3';

ROLLBACK;

-- FOREIGN KEY 삭제 원할 경우
-- 해당 컬럼의 제약조건을 "잠시" 비활성화 시켜두면 삭제 가능 -> 다시 활성화해줘야

-- 삭제 시 FOREIGN KEY 제약조건으로 칼럼 삭제가 불가능한 경우
-- 제약조건을 비활성화 할 수 있다.
-- SYS_C007156
-- 추가, 변경은 ALTER를 사용 (객체의 제약조건)
ALTER TABLE EMPLOYEE
DISABLE CONSTRAINT SYS_C007156 CASCADE;

DELETE
  FROM DEPARTMENT D
 WHERE D.DEPT_ID = 'D1';
 
SELECT
       D.*
  FROM DEPARTMENT D;

SELECT
       E.*
  FROM EMPLOYEE E;

ROLLBACK;

-- 비활성화 된 제약조건을 다시 활성화
ALTER TABLE EMPLOYEE
ENABLE CONSTRAINT SYS_C007156; 

-- TRUNCATE : 테이블의 전체 행을 삭제할 시 사용한다.
--            DELETE보다 수행 속도가 빠름
--            ROLLBACK으로 통해 복구 불가
SELECT 
       ES.*
  FROM EMP_SALARY ES;
  
COMMIT;

DELETE
  FROM EMP_SALARY ES;

ROLLBACK;

TRUNCATE TABLE EMP_SALARY;

ROLLBACK;



-- MERGE : 구조가 같은 두 개의 테이블을 하나로 합치는 기능을 한다.
--          테이블에서 지정하는 조건의 값이 존재하면 UPDATE
--          조건의 값이 없으면 INSERT한다.
CREATE TABLE EMP_M01
AS
SELECT E.*
  FROM EMPLOYEE E;
  
CREATE TABLE EMP_M02
AS
SELECT E.*
  FROM EMPLOYEE E
 WHERE E.JOB_CODE = 'J4';

INSERT
  INTO EMP_M02 A
(
  A.EMP_ID, A.EMP_NAME, A.EMP_NO, A.EMAIL, A.PHONE
, A.DEPT_CODE, A.JOB_CODE, A.SAL_LEVEL, A.SALARY, A.BONUS
, A.MANAGER_ID, A.HIRE_DATE, A.ENT_DATE, A.ENT_YN
)
VALUES
(
  999,'유승제','130708-3111111','yu_sj@gmail.com','01011112222'
, 'D9','J4','S1',90000000,0.5
, NULL, SYSDATE, NULL, DEFAULT
);

SELECT
       EM.*
  FROM EMP_M02 EM;

UPDATE
       EMP_M02 EM
   SET EM.SALARY = 0;

SELECT * FROM EMP_M02;


MERGE 
 INTO EMP_M01 M1
USING EMP_M02 M2
   ON(M1.EMP_ID = M2.EMP_ID)
 WHEN MATCHED THEN
UPDATE 
   SET M1.EMP_NAME = M2.EMP_NAME
     , M1.EMP_NO = M2.EMP_NO
     , M1.EMAIL = M2.EMAIL
     , M1.PHONE = M2.PHONE
     , M1.DEPT_CODE = M2.DEPT_CODE
     , M1.JOB_CODE = M2.JOB_CODE
     , M1.SAL_LEVEL = M2.SAL_LEVEL
     , M1.SALARY = M2.SALARY
     , M1.BONUS = M2.BONUS
     , M1.MANAGER_ID = M2.MANAGER_ID
     , M1.HIRE_DATE = M2.HIRE_DATE
     , M1.ENT_DATE = M2.ENT_DATE
     , M1.ENT_YN = M2.ENT_YN
 WHEN NOT MATCHED THEN
INSERT 
(
  M1.EMP_ID, M1.EMP_NAME, M1.EMP_NO, M1.EMAIL, M1.PHONE
, M1.DEPT_CODE, M1.JOB_CODE, M1.SAL_LEVEL, M1.SALARY, M1.BONUS
, M1.MANAGER_ID, M1.HIRE_DATE, M1.ENT_DATE, M1.ENT_YN
)
VALUES 
(
  M2.EMP_ID, M2.EMP_NAME, M2.EMP_NO, M2.EMAIL, M2.PHONE
, M2.DEPT_CODE, M2.JOB_CODE, M2.SAL_LEVEL, M2.SALARY, M2.BONUS
, M2.MANAGER_ID, M2.HIRE_DATE, M2.ENT_DATE, M2.ENT_YN
);

-- 값이 있으면 업데이트, 값이 없으면 M1에다 M2(value값) 추가(INSERT) -> MERGE 덮어써줌 (합침)
-- M2가 신규값이고 구조는 M1과 동일해야

SELECT * FROM EMP_M01;












