-- 데이터 딕셔너리(Data Dictionary)
-- 자원을 효율적으로 관리하기 위해 다양한 정보를 저장하는 시스템 테이블
-- 사용자가 테이블을 생성하거나, 사용자를 변경하는 등 작업을 할 때
-- 데이터베이스 서버에 의해 자동으로 갱신되는 테이블
-- 제약조건 테이블에 추가하면 조회했을 때 자동으로 추가됨 (자동 갱신)

-- 사용자는 데이터 딕셔너리 내용을 직접 수정하거나 삭제할 수는 없다.

-- 뷰(VIEW) : 원본 테이블을 커스터마이징해서 보여주는 원본 테이블의 가상 테이블 객체

-- 3개의 딕셔너리 뷰로 나뉜다.
-- 1. DBA_XXX : 데이터베이스 관리자만 접근이 가능한 객체 등의 정보 조회
-- 2. ALL_XXX : 자신의 계정 + 권한을 부여받은 객체의 정보 조회
-- 3. USER_XXX : 자신의 계정이 소유한 객체 등에 관한 정보 조회
-- USER_CONSTRAINTS : 자기가 소유하고 있는 테이블의 제약조건 목록
-- USER_CONS_COLUMNS : 그 테이블 안에 어떤 컬럼에 제약조건이 있는지 보여줌
-- USER_VIEWS : 유저가 만든 뷰테이블을 조회할 수 있는 시스템 테이블
-- CONSTRAINTS NAME 기준으로 조인을 함(중복 불가)

-- GRANT CREATE VIEW TO EMPLOYEE(부여할 사용자);

CREATE OR REPLACE VIEW V_EMP
(
  사번
, 이름
, 부서
)
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , E.DEPT_CODE
  FROM EMPLOYEE E;
     
-- 뷰를 생성할 수 있는 권한이 없을 때는 뷰 생성이 안 됨     

SELECT
       V.*
  FROM V_EMP V;
  
SELECT
       V.*
  FROM (SELECT E.EMP_ID
             , E.EMP_NAME
             , E.DEPT_CODE
          FROM EMPLOYEE E
       ) V;

SELECT
       *
  FROM USER_VIEWS;

-- 인라인뷰 (뷰테이블과 동일한 기능)
-- 이걸 다른 데에서도 쓰고 싶으면 뷰테이블을 만들어 주는 것
-- 시스템 테이블에 이 쿼리문이 들어가 있음(데이터가 들어가 있는 게 아니라)
-- 뷰 테이블 호출 시 해당 쿼리문 호출
     
-- 뷰 테이블 쓰는 이유 : 새롭게 테이블 생성하지 않고 원본 테이블에서 업데이트하면
--                   자동으로 값이 수정되어 데이터 무결성 지킬 수 있음     
--                   DML이 가능해서 원본 테이블을 변경 가능하지만
--                   DML 명령어로 조작이 불가능한 경우들 때문에 조작이 어려움
     
DROP VIEW V_EMP;     
     
-- VIEW(뷰)
-- SELECT 쿼리문(TEXT 컬럼에 쿼리문 자체가 들어가 있음)을 저장한 객체이다.
-- 실질적인 데이터를 저장하고 있지 않음 - 단순히 SELECT 구문의 쿼리만 저장
-- 테이블을 사용하는 것과 동일하게 사용 가능
-- CREATE [OR REPLACE] VIEW 뷰이름 AS 서브쿼리
-- CREATE 동일한 이름으로 만드는 걸 못함
-- REPLACE 덮어쓰기 가능해짐

-- 사번, 이름, 직급명, 부서명, 근무지역을 조회하고,
-- 그 결과를 V_RESULT_EMP라는 뷰를 생성해서 저장하세요
CREATE OR REPLACE VIEW V_RESULT_EMP
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , J.JOB_NAME
     , D.DEPT_TITLE
     , L.LOCAL_NAME
  FROM EMPLOYEE E --> 베이스 테이블
  LEFT JOIN JOB J ON(E.JOB_CODE = J.JOB_CODE)
  LEFT JOIN DEPARTMENT D ON(E.DEPT_CODE = D.DEPT_ID)
  LEFT JOIN LOCATION L ON(D.LOCATION_ID = L.LOCAL_CODE);

SELECT 
       V.*
  FROM V_RESULT_EMP V
 WHERE V.EMP_ID = '202';

-- 뷰에 대한 정보를 확인하는 데이터 딕셔너리 테이블(USER_VIEWS)
-- 시스템 테이블에 뷰에 쿼리문이 들어가 있음
SELECT 
       UV.*
  FROM USER_VIEWS UV;

--"SELECT E.EMP_ID
--     , E.EMP_NAME
--     , J.JOB_NAME
--     , D.DEPT_TITLE
--     , L.LOCAL_NAME
--  FROM EMPLOYEE E --> 베이스 테이블
--  LEFT JOIN JOB J ON(E.JOB_CODE = J.JOB_CODE)
--  LEFT JOIN DEPARTMENT D ON(E.DEPT_CODE = D.DEPT_ID)
--  LEFT JOIN LOCATION L ON(D.LOCATION_ID = L.LOCAL_CODE)"
-- 실제로 데이터가 들어있는 게 아니라 SELECT 구문이 들어가 있음 -> 논리로만 존재
-- 쿼리문이 데이터 딕셔너리라는 시스템 테이블에 들어가서 뷰를 호출할 때 이것을 불러오는 것

-- 베이스 테이블의 정보가 변경되면
-- VIEW도 같이 변경됨

COMMIT;

-- EMPLOYEE 테이블에 205(정중하) -> 정중앙
UPDATE EMPLOYEE
   SET EMP_NAME = '정중앙'
 WHERE EMP_ID = 205;

SELECT
     E.*
  FROM EMPLOYEE E
 WHERE E.EMP_ID = '205';

SELECT
     V.*
  FROM V_RESULT_EMP  V
 WHERE V.EMP_ID = '205';

ROLLBACK;

DROP VIEW V_RESULT_EMP;

-- 뷰의 컬럼에 별칭을 부여할 수 있다. 
CREATE OR REPLACE VIEW V_EMPLOYEE
(
  사번
, 이름
, 부서
, 지역
)
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , D.DEPT_TITLE
     , N.NATIONAL_NAME
  FROM EMPLOYEE E
  LEFT JOIN DEPARTMENT D ON(E.DEPT_CODE = D.DEPT_ID)
  LEFT JOIN LOCATION L ON(D.LOCATION_ID = L.LOCAL_CODE)
  LEFT JOIN NATIONAL N ON(L.NATIONAL_CODE = N.NATIONAL_CODE);

SELECT
      V.*
  FROM V_EMPLOYEE V;

-- 뷰 서브쿼리 안에 연산의 결과도 포함할 수 있다.
CREATE OR REPLACE VIEW V_EMP_JOB
(
  사번
, 이름
, 직급
, 성별
, 근무년수
)
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , J.JOB_NAME
     , DECODE(SUBSTR(E.EMP_NO,8,1),1,'남','여')
     , EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM E.HIRE_DATE)
  FROM EMPLOYEE E
  JOIN JOB J ON(E.JOB_CODE = J.JOB_CODE);

SELECT
       V.*
  FROM V_EMP_JOB V;

SELECT * FROM USER_VIEWS;

--"SELECT E.EMP_ID
--     , E.EMP_NAME
--     , J.JOB_NAME
--     , DECODE(SUBSTR(E.EMP_NO,8,1),1,'남','여')
--     , EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM E.HIRE_DATE)
--  FROM EMPLOYEE E
--  JOIN JOB J ON(E.JOB_CODE = J.JOB_CODE)"

CREATE OR REPLACE VIEW V_JOB
AS
SELECT J.JOB_CODE
     , J.JOB_NAME
  FROM JOB J;

SELECT
       V.*
  FROM V_JOB V;
     
-- V_JOB view 테이블에 J8, 인턴     
INSERT 
INTO V_JOB
(
  JOB_CODE
, JOB_NAME
)
VALUES
(
  'J8'
, '인턴'
);
 
SELECT
       V.*
  FROM V_JOB V;
  
SELECT
      J.*
  FROM JOB J;
-- 이때는 위배되는 사항이 없어 뷰 테이블에서 DML(INSERT, UPDATE, DELETE)가 동작 가능
-- 뷰테이블이 원본의 모든 내용을 갖고 있을 땐 뷰테이블에서 조작 가능
 
UPDATE
       V_JOB V
   SET V.JOB_NAME = '알바'
 WHERE V.JOB_CODE = 'J8';

SELECT
 *
  FROM V_JOB;

SELECT 
 *
   FROM JOB;

DELETE
  FROM V_JOB V
 WHERE V.JOB_CODE  = 'J8';

-- DML 명령어로 조작이 불가능한 경우
-- 1. 뷰 정의에 포함되지 않은 컬럼 조작하는 경우
-- 2. 뷰에 포함 안되는(보여지지 않는) 컬럼 중 
--    베이스가 되는 테이블 컬럼에 NOT NULL 제약조건이 지정된 경우(업뎃이나 인서트를 NOT NULL 빼고 적용하므로)
-- 3. 산술 표현식이 정의된 경우
-- 4. JOIN을 이용해 여러 테이블을 연결한 경우 
-- 5. DISTINCT를 포함한 경우 
-- 6. 그룹함수나 GROUP BY 절을 포함한 경우

-- 뷰 정의에 포함되지 않은 컬럼을 조작하는 경우
CREATE OR REPLACE VIEW V_JOB2
AS
SELECT J.JOB_CODE
  FROM JOB J;

INSERT
  INTO V_JOB2
(
  JOB_CODE
, JOB_NAME
)
VALUES
(
  'J8'
, '인턴'
); -- 에러 발생 (뷰 정의에 포함되지 않은 컬럼 조작)

UPDATE
       V_JOB2 V
   SET V.JOB_NAME = '인턴'
 WHERE V.JOB_CODE = 'J7'; -- 에러 발생 (뷰 정의에 포함되지 않은 컬럼 조작)

INSERT
  INTO V_JOB2
(
  JOB_CODE
)
VALUES
(
  'J8'
);

SELECT 
       J.*
  FROM JOB J;

DELETE
  FROM V_JOB2 V
 WHERE V.JOB_CODE = 'J8';
-- INSERT, UPDATE와 달리 DELETE는 사용가능하다.

CREATE OR REPLACE VIEW V_JOB3
AS
SELECT J.JOB_NAME
  FROM JOB J;

INSERT
  INTO V_JOB3
(
  JOB_CODE
, JOB_NAME
)
VALUES
(
  'J8'
, '인턴'
); -- 에러 발생

INSERT
  INTO V_JOB3
(
  JOB_NAME
)
VALUES
(
 '인턴'
); -- NOT NULL 제약조건 때문에 에러발생

UPDATE
       V_JOB3 V
   SET V.JOB_NAME = '인턴'
 WHERE V.JOB_NAME = '사원'; -- 성공 (사원을 인턴으로!) INSERT는 안 됨.
 
-- 테이블에 어떤 제약조건이 있는지에 따라 조작할 수 있는지 없는지 파악해야
-- INSERT, UPDATE, DELETE별로 다름

-- 산술표현식으로 정의된 경우
CREATE OR REPLACE VIEW EMP_SAL
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , E.SALARY
     , (E.SALARY + (E.SALARY * NVL(E.BONUS,0))) * 12 연봉
  FROM EMPLOYEE E;

SELECT
       ES.*
  FROM EMP_SAL ES;

INSERT
  INTO EMP_SAL
(
  EMP_ID
, EMP_NAME
, SALARY
, 연봉
)
VALUES
(
  '800'
, '정진훈'
, 3000000
, 4000000
); -- 에러발생 / 연봉 칼럼이 산술계산이 포함되어 있으므로("virtual column not allowed here")

UPDATE
       EMP_SAL ES
   SET ES.연봉 = 4000000
 WHERE ES.EMP_ID = '200'; -- 에러발생 ( "virtual column not allowed here")

-- DELETE할 때는 사용 가능
DELETE
  FROM EMP_SAL ES
 WHERE ES.연봉 = '124800000';

SELECT
       ES.*
  FROM EMP_SAL ES;

SELECT 
       E.*
  FROM EMPLOYEE E;
-- 원본에 영향을 미침

ROLLBACK;

-- JOIN을 이용해 여러 테이블을 연결한 경우 (INSERT구문 이용 못함)
CREATE OR REPLACE VIEW V_JOINEMP
AS
SELECT E.EMP_ID
     , E.EMP_NAME
     , D.DEPT_TITLE
  FROM EMPLOYEE E
  LEFT JOIN DEPARTMENT D ON(E.DEPT_CODE = D.DEPT_ID);

SELECT
       V.*
  FROM V_JOINEMP V;

INSERT 
  INTO V_JOINEMP
(
  EMP_ID
, EMP_NAME
, DEPT_TITLE
)
VALUES
(
  888
, '조세오'
, '인사관리부'
); -- 에러발생

UPDATE
       V_JOINEMP V
   SET V.DEPT_TITLE = '인사관리부'
 WHERE V.EMP_ID = '219'; --에러발생

-- 베이스 테이블에만 영향을 끼친다.
DELETE
  FROM V_JOINEMP V
 WHERE V.EMP_ID = '219';
 
SELECT 
       V.*
  FROM V_JOINEMP V
 WHERE V.EMP_ID = '219';
  
SELECT
       D.*
  FROM DEPARTMENT D;

SELECT
       E.*
  FROM EMPLOYEE E;


-- DISTINCT를 포함한 경우
CREATE OR REPLACE VIEW V_DT_EMP
AS
SELECT DISTINCT E.JOB_CODE
  FROM EMPLOYEE E;

SELECT
       VE.*
  FROM V_DT_EMP VE;

INSERT
  INTO V_DT_EMP
(
  JOB_CODE
)
VALUES
(
  'J9'
);  -- 에러 발생(중복을 제거하는 DISTINCT가 있으면 INSERT 못함 - 언제 중복될지 모르니까)

UPDATE
       V_DT_EMP V
   SET V.JOB_CODE = 'J9'
 WHERE V.JOB_CODE = 'J7'; -- 에러 발생(DISTINCT 있으면 중복될 수 있으므로 UPDATE도 못함)

DELETE
  FROM V_DT_EMP V
 WHERE V.JOB_CODE = 'J7'; -- 에러 발생

-- 그룹함수(여러 개 중 하나)나 GROUP BY절을 포함한 경우
-- DISTINCT와 비슷하게 DML 모두 안됨
CREATE OR REPLACE VIEW V_GROUPDEPT
AS
SELECT E.DEPT_CODE
     , SUM(E.SALARY) 합계
     , AVG(E.SALARY) 평균
  FROM EMPLOYEE E
 GROUP BY E.DEPT_CODE;

SELECT
       V.*
  FROM V_GROUPDEPT V;

INSERT
  INTO V_GROUPDEPT
(
  DEPT_CODE
, 합계
, 평균
)
VALUES
(
  'D0'
, 6000000
, 5000000
); -- 에러 발생 (산술계산이 컬럼에 있을 때와 비슷 - "virtual column not allowed here")

UPDATE
       V_GROUPDEPT V
   SET V.DEPT_CODE = 'D10'
 WHERE V.DEPT_CODE = 'D1'; -- 에러발생
 
DELETE
  FROM V_GROUPDEPT V
 WHERE V.DEPT_CODE = 'D1'; -- 에러발생

-- VIEW 옵션
-- OR REPLACE : 기존에 동일한 뷰 테이블명이 존재하는 경우 덮어쓰고 
--              존재하지 않으면 새로 생성하는 옵션
-- CREATE : 그냥 생성만 해줌
-- FORCE 옵션 : 서브쿼리에 사용된 원본 테이블이 존재하지 않아도 뷰 생성 (CREATE OR REPLACE "FORCE" VIEW V_EMP)
-- 테이블은 없는데 뷰 테이블은 만들고 싶음. 나중에 테이블 만들고 정보 가져다 뷰 테이블 쓸 수 있음.
CREATE OR REPLACE VIEW TEST_1
AS
SELECT
       *
  FROM EMPLOYEE;

DROP VIEW TEST_1;

CREATE OR REPLACE FORCE VIEW V_EMP
AS
SELECT TCODE
     , TNAME
     , TCONTENTS
  FROM TT;

SELECT
       V.*
  FROM V_EMP V;
-- 뷰테이블이 만들어지긴 했지만 원본 테이블이 없기 때문에 조회할 내용이 없다.

SELECT * FROM USER_VIEWS;

-- NOFORCE 옵션 : 서브쿼리에 원본 테이블이 존재해야만 뷰 생성 (기본값)
CREATE OR REPLACE /*NOFORCE*/ VIEW V_EMP2
AS
SELECT TCODE
     , TNAME
     , TCONTENTS
  FROM TT;

-- WITH CHECK 옵션 : 컬럼의 값을 수정하지 못하게 한다.
-- WITH CHECK OPTION : 조건절에 사용된 컬럼의 값을 수정하지 못하게 한다.
--                     (WHERE MANAGER_ID = '200')
CREATE OR REPLACE VIEW V_EMP3
AS
SELECT E.*
  FROM EMPLOYEE E
 WHERE MANAGER_ID = '200'
  WITH CHECK OPTION;

SELECT
       VE3.*
  FROM V_EMP3 VE3;

UPDATE
       V_EMP3
   SET MANAGER_ID = '900'
 WHERE MANAGER_ID = '200'; -- 변경불가(view WITH CHECK OPTION where-clause violation)

-- WITH READ ONLY 옵션 : DML 수행이 아예 불가능해짐
--                      VIEW를 읽기전용으로 만들어줌
CREATE OR REPLACE VIEW V_DEPT
AS
SELECT D.*
  FROM DEPARTMENT D
  WITH READ ONLY;

DELETE
  FROM V_DEPT;
  
SELECT
       V.*
  FROM V_DEPT V;

